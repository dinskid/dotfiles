DATA SEGMENT
M DB ?
N DB ?
O DB ?
A DB 25 DUP(?)
B DB 25 DUP(?)
C DB 100 DUP(0)

TEMP DB ?

OUTPUT DB 50 DUP('$')
DATA ENDS

CODE SEGMENT
ASSUME CS:CODE,DS:DATA

NUM_TO_STR PROC
; ARG IS PASSED THRU DX
MOV AX, DX
XOR DX, DX
XOR CX, CX ; TO KNOW THE COUNT OF 
MOV BX, 10 ; TO GET THE NUMBER
MOO1:
	CMP AX, 0
	JE EXIT
	INC CX ; TO KNOW HOW MUCH TO POP OFF
	DIV BX ; AX/=10
	PUSH DX ; PUSH THE REMAINDER TO STACK
	XOR DX, DX
	JMP MOO1
EXIT: ; POP OFF CX TIMES ONTO THE VARIABLE
	MOV SI, 0
	CMP CX, 0
	JE ZERO
	POP_OFF:
		POP AX
		ADD AL, 30H
		MOV [OUTPUT+SI], AL
		INC SI
		LOOP POP_OFF
RETURN:
	MOV [OUTPUT+SI], '$'
	RET
ZERO:
	MOV [OUTPUT+SI], 030H
	JMP RETURN
NUM_TO_STR ENDP

START:
MOV AX, DATA
MOV DS, AX

MOV AH, 01H
INT 21H
SUB AL, 30H
MOV [M], AL
MOV AH, 02H
MOV DL, 0AH
INT 21H
MOV DL, 0DH
INT 21H

MOV AH, 01H
INT 21H
SUB AL, 30H
MOV [N], AL
MOV AH, 02H
MOV DL, 0AH
INT 21H
MOV DL, 0DH
INT 21H

MOV AH, 01H
INT 21H
SUB AL, 30H
MOV [O], AL
MOV AH, 02H
MOV DL, 0AH
INT 21H
MOV DL, 0DH
INT 21H

XOR AH, AH
MOV AL, [M]
MUL [N]

MOV CX, AX

MOV SI, 0
READA:
	MOV AH, 01H
	INT 21H
	SUB AL, 30H
	MOV A[SI], AL
	INC SI
	MOV AH, 02H
	MOV DL, 0AH
	INT 21H
	MOV DL, 0DH
	INT 21H
	LOOP READA

MOV AL, [N]
MUL [O]
MOV CX, AX
MOV SI, 0
READB:
	MOV AH, 01H
	INT 21H
	SUB AL, 30H
	MOV B[SI], AL
	INC SI
	MOV AH, 02H
	MOV DL, 0AH
	INT 21H
	MOV DL, 0DH
	INT 21H
	LOOP READB

INT 3
MOV BL, 0
LOOP1:
	CMP BL, M
	JGE ENDLOOP1
	MOV CL, 0
	LOOP2:
		CMP CL, O
		JGE ENDLOOP2
		MOV DL, 0
		LOOP3:
			CMP DL, N
			JGE ENDLOOP3

			MOV AL, N
			MUL BL
			ADD AL, DL

			XOR AH, AH
			MOV SI, AX
			MOV AL, A[SI]
			MOV TEMP, AL

			MOV AL, O
			MUL DL
			ADD AL, CL

			XOR AH, AH
			MOV SI, AX

			MOV AL, B[SI]

			MUL [TEMP]
			MOV TEMP, AL ; TAKE CARE THAT ALL PRODUCTS FIT IN 8 BITS

			MOV AL, O
			MUL BL
			ADD AL, CL
			
			XOR AH, AH
			MOV SI, AX
			MOV AL, [TEMP]
			ADD C[SI], AL

			INC DL
			JMP LOOP3
		ENDLOOP3:
		INC CL
		JMP LOOP2
	ENDLOOP2:
	INC BL
	JMP LOOP1
ENDLOOP1:

XOR AH, AH
MOV AL, [M]
MUL [O]
MOV CX, AX

MOV SI, 0
MOV BL, [O]

PRINTLOOP:
	PUSH CX
	PUSH SI
	INT 3
	MOV DL, C[SI]
	XOR DH, DH
	CALL NUM_TO_STR
	LEA DX, OUTPUT
	MOV AH, 09H
	INT 21H
	MOV DL, ' '
	MOV AH, 02H
	INT 21H
	POP SI
	INC SI
	POP CX
	LOOP PRINTLOOP

MOV AH, 4CH
INT 21H
CODE ENDS
END START

